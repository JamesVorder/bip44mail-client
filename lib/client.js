var lightwallet = require('eth-lightwallet');
var fs = require('fs');
var util = require("ethereumjs-util");
var request = require("request");
var Web3 = require('web3');
var web3 = new Web3(new Web3.providers.HttpProvider("http://localhost:8545"));

function Client (keystore, path){
  if(keystore){
    this.keystore = lightwallet.keystore.deserialize(JSON.stringify(keystore));
  }
  if(path){
    this.path = path;
  }
}

Client.prototype.deployInbox = function(name){
  var _name = name;
  var inboxContract = web3.eth.contract([{"constant":false,"inputs":[{"name":"_location","type":"bytes32"}],"name":"addMessage","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"getMessages","outputs":[{"name":"","type":"bytes32[]"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[{"name":"_name","type":"string"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"}]);
  var inbox = inboxContract.new(
    _name,
    {
      from: web3.eth.accounts[0],
      data: '0x6060604052341561000f57600080fd5b604051610303380380610303833981016040528080518201919050508060019080519060200190610041929190610048565b50506100ed565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061008957805160ff19168380011785556100b7565b828001600101855582156100b7579182015b828111156100b657825182559160200191906001019061009b565b5b5090506100c491906100c8565b5090565b6100ea91905b808211156100e65760008160009055506001016100ce565b5090565b90565b610207806100fc6000396000f30060606040526004361061004c576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063024aebcd146100515780635ff6cbf314610090575b600080fd5b341561005c57600080fd5b6100766004808035600019169060200190919050506100fa565b604051808215151515815260200191505060405180910390f35b341561009b57600080fd5b6100a3610135565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156100e65780820151818401526020810190506100cb565b505050509050019250505060405180910390f35b600080600080815480929190600101919050559050826002600083815260200190815260200160002081600019169055506001915050919050565b61013d6101c7565b6101456101c7565b600080546040518059106101565750595b90808252806020026020018201604052509150600090505b6000548110156101bf576002600082815260200190815260200160002054828281518110151561019a57fe5b906020019060200201906000191690816000191681525050808060010191505061016e565b819250505090565b6020604051908101604052806000815250905600a165627a7a72305820751e4657d51a6298cdf5c9be63d08ecaeabccc1886bffe66384c15dbb40e0f3c0029',
      gas: '4700000'
    }, function (e, contract){
      console.log(e, contract);
      if (typeof contract.address !== 'undefined') {
        console.log('Contract mined! address: ' + contract.address + ' transactionHash: ' + contract.transactionHash);
      }
    });
}

Client.prototype.addAddress = function (password, callback) {
  //TODO: Make a call to the server with a signature generated by the new address.
  //This should start the ball rolling for address registration
  this.keystore.keyFromPassword(password, (function (err, pwDerivedKey) {
    if (err) {
      callback(err, undefined)
    } else {
      this.keystore.generateNewAddress(pwDerivedKey, 1);
      callback(undefined, this.keystore.getAddresses());
    }
  }).bind(this));
};

Client.prototype.signMessage = function (message, password, addr, callback) {
  this.keystore.keyFromPassword(password, (function (err, derivedKey) {
    if (err) {
      callback(err, undefined);
    } else {
      var sig = lightwallet.signing.signMsg(this.keystore, derivedKey, message, addr);
      callback(undefined, sig);
    }
  }).bind(this ));
};

Client.prototype.SendMail = function(to, from_addr, subject, message, signature){
    request.post(
    'http://localhost:3000/send',
    {
        json: {
            signature: JSON.stringify(signature),
            address: from_addr,
            to: to,
            from: from_addr,
            subject: subject,
            message: message
        }
    },
    function (error, response) {
        if(error) {
            console.log("Error: " + error);
        }
        else {
            console.log('Success: ' + response.data);
        }
    });
};

Client.prototype.registerAddress = function(signature, address){
  request.post(
    'http://localhost:3000/inbox',
    {
      json: {
        signature: JSON.stringify(signature),
        address: address
      }
    },
    function(error, response){
      if(error){
        console.log("Error: " + error);
      } else{
        console.log("Success: " + response.data)
      }
    }
  )
};

Client.prototype.getMail = function(password, callback){
  var addresses = this.keystore.getAddresses();
  for(var i in addresses){
    this.signMessage(addresses[i], password, addresses[i], function(err, sig){
      if(err){
        callback(err, null);
      } else{
        request.get('http://localhost:3000/mail?address=' + encodeURIComponent(addresses[i]) + '&signature=' + encodeURIComponent(JSON.stringify(sig)),
          function(err, data){
          if(err){
            callback(err, null);
          } else{
            callback(null, data);
          }
          });
      }
    });
  }
}

Client.prototype.getAddresses = function(){
  return this.keystore.getAddresses();
};

module.exports = Client;