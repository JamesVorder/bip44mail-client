var lightwallet = require('eth-lightwallet');
var fs = require('fs');
var util = require("ethereumjs-util");
var request = require("request");

var keystore;

function Client (keystore){
  if(keystore){
    this.keystore = lightwallet.keystore.deserialize(JSON.stringify(keystore));
  }
}

Client.prototype.CreateKeystore = function (words, password, callback) {
  lightwallet.keystore.createVault({
    password: password,
    seedPhrase: words,
    hdPathString: "m/44'/60'/0'/0"
  }, function (err, ks) {
    if (err) {
      callback(err, undefined)
    }
    this.keystore = ks;
    callback(undefined, ks);
  });
};

Client.prototype.OpenKeystoreFromPath = function (path, callback) {
  fs.readFile(path, 'utf8', function (err, data) {
    if (err) {
      callback(err, undefined)
    }
    this.keystore = lightwallet.keystore.deserialize(data);
    callback(undefined, this.keystore);
  });
};

Client.prototype.addAddress = function (password, callback) {
  //TODO: Make a call to the server with a signature generated by the new address.
  //This should start the ball rolling for address registration
  this.keystore.keyFromPassword(password, function (err, pwDerivedKey) {
    if (err) {
      callback(err, undefined)
    } else {
      this.keystore.generateNewAddress(pwDerivedKey, 1);
      callback(undefined, this.keystore.getAddresses());
    }
  });
};

Client.prototype.signMessage = function (message, password, addr, callback) {
  keystore.keyFromPassword(password, function (err, derivedKey) {
    if (err) {
      console.log(err)
    } else {
      var sig = lightwallet.signing.signMsg(this.keystore, derivedKey, message, addr);
      callback(undefined, sig);
    }
  });
};

Client.prototype.SendMail = function(to, from_addr, subject, message, password){
    request.post(
    'http://localhost:3000/send',
    {
        json: {
            //signature: JSON.stringify(signature),
            address: from_addr,
            to: to,
            from: from_addr,
            subject: subject,
            message: message
        }
    },
    function (error, response, body) {
        if(error) {
            console.log("Error: " + error);
        }
        //if (!error && response.statusCode == 200) {
        else {
            console.log('Success: ' + body);
        }
    });
    //TODO: This stuff...
    // this.signMessage(message, password, from_addr, function(err, signature){
    //
    // });
};

Client.prototype.getAddresses = function(){
  return this.keystore.getAddresses();
}

module.exports = Client;